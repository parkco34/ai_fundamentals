#!/usr/bin/env python
from collections import Counter
import numpy as np

class Node:
    """
    Node class for decision  tree
    """
    def __init__(self):
        self.feature = None
        self.threshold = None
        self.left = None
        self.right = None
        self.is_leaf = False
        self.value = None

class DecisionTree:

    def __init__(
        self, 
        max_depth=None, 
        min_samples_split=2, 
        min_samples_leaf=1,
        criterion="gini"
    ):
        """
        Initialize decision tree with parameters
        """
        self.root = None
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.min_samples_leaf = min_samples_leaf
        self.criterion = criterion

    def impurity(self, y):
        """
        Uses Gini Impurity to calculate the impurity of a node.

        """
        if len(y) == 0:
            return 0

        # Class Probabilities
        counter = Counter(y)


    def fit(self, X, y):
        """
        Builds tree using training data
        --------------------------------------------
        INPUT:
            X: (list) Training data
            y: (list) Labels

        OUTPUT:

        """
        pass

    def prediction(self, X):
        """
        Make predictions using the tree.
        --------------------------------------------
        INPUT:

        OUTPUT:

        """
        pass

    def calc_gini(self, y):
        """
        Calculate gini impurity.
        ---------------------------------------------
        INPUT:
            y: 

        OUTPUT:

        """
        pass

